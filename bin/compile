#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

### Configure environment
set -o errexit    # always exit on error
set -o pipefail   # don't ignore exit codes when piping output
set -o nounset    # fail on unset variables
unset GIT_DIR     # Avoid GIT_DIR leak from previous build steps

if [ "$STACK" != "heroku-14" ] && [ "$STACK" != "heroku-16" ] && [ "$STACK" != "heroku-18" ]; then
	echo "Need heroku-14 or heroku-16 or heroku-18 stack"
	exit 1
fi

### Configure directories
BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
BP_DIR=$(cd $(dirname ${0:-}); cd ..; pwd)
: ${NETCORE_SDK:="2.1.4"}
: ${NETCORE_VERSION:="2.0.5"}
: ${NODE_VERSION:="8.9.4"}


echo "BUILD_DIR=${BUILD_DIR}"
echo "CACHE_DIR=${CACHE_DIR}"
echo "ENV_DIR=${ENV_DIR}"


mkdir -p $BUILD_DIR/.profile.d
cp $BP_DIR/profile/* $BUILD_DIR/.profile.d/

### Load dependencies
source $BP_DIR/lib/utils

export_env_dir "$ENV_DIR"
export NUGET_XMLDOC_MODE=${NUGET_XMLDOC_MODE:-skip}
export DOTNET_SKIP_FIRST_TIME_EXPERIENCE=${DOTNET_SKIP_FIRST_TIME_EXPERIENCE:-1}
export DOTNET_CLI_TELEMETRY_OPTOUT=${DOTNET_CLI_TELEMETRY_OPTOUT:-1}
export NUGET_PACKAGES="${CACHE_DIR}/nuget/cache"

if [ -z ${PROJECT_FILE:-} ]; then
	PROJECT_FILE=$(x=$(dirname $(find ${BUILD_DIR} -maxdepth 5 -iname Startup.cs | head -1)); while [[ "$x" =~ $BUILD_DIR ]] ; do find "$x" -maxdepth 1 -name *.csproj; x=`dirname "$x"`; done)
fi

if [ -n "$(cat $PROJECT_FILE | grep 'netcoreapp2.0')" ]; then
	NETCORE_SDK="2.1.4"
	NETCORE_VERSION="2.0.5"
elif [ -n "$(cat $PROJECT_FILE | grep 'netcoreapp2.1')" ]; then
	NETCORE_SDK="2.1.403"
	NETCORE_VERSION="2.1.0"
elif [ -n "$(cat $PROJECT_FILE | grep 'netcoreapp2.2')" ]; then
	NETCORE_SDK="2.2.202"
	NETCORE_VERSION="2.2.0"
fi

echo "Installing the dependencies"
apt_install libunwind8 gettext iputils-ping


echo "Check if is necesary and install node"
export ANGULAR_PATH=$(dirname $(x=$(dirname $(find ${BUILD_DIR} -maxdepth 5 -iname package.json | head -1)); while [[ "$x" =~ $BUILD_DIR ]] ; do find "$x" -maxdepth 1 -name package.json; x=`dirname "$x"`; done))
echo "Angular Path: $ANGULAR_PATH"
if [ -d "$ANGULAR_PATH" ]; then
	# Install Node
	NODE_PATH=`mktemp -d`
	curl https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-x64.tar.gz -Ls \
		| tar xz -C ${NODE_PATH}
	export PATH="${NODE_PATH}/node-v${NODE_VERSION}-linux-x64/bin:${PATH}"
	echo "Npm version:"
	npm -v

	# Find package.json folder and install
	cd $ANGULAR_PATH
	npm install

	# Build static files depending of the environment
	if [ "$ASPNETCORE_ENVIRONMENT" = "Production" ] ; then npm run build; else npm run builddev; fi
	
	# Clean
	npm run clean
	
	cd ..
	rm -rf $ANGULAR_PATH
fi

echo "Installing dotnet"
install_dotnet $BUILD_DIR $CACHE_DIR $NETCORE_SDK $NETCORE_VERSION

export PATH="/app/dotnet:${PATH}"
export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}"

cd $BUILD_DIR
echo "Dotnet version:"
dotnet --info

if [ -z "${PROJECT_NAME:-}" ]; then
	PROJECT_NAME=$(basename ${PROJECT_FILE%.*})
fi

echo "Project name: ${PROJECT_NAME}"
echo "publish ${PROJECT_FILE}"
#dotnet test --configuration Release /p:CollectCoverage=true --runtime linux-x64
dotnet build $PROJECT_FILE --output /$BUILD_DIR/release --configuration Release --runtime linux-x64
dotnet publish $PROJECT_FILE --output /$BUILD_DIR/release --configuration Release --runtime linux-x64

export SRC_PATH=$(dirname $PROJECT_FILE)
echo "Source Path: $SRC_PATH"
echo "Remove all files and folders except Procfile and Release folder ignoring errors"
rm -rf $SRC_PATH
find -maxdepth 1 ! -name Procfile ! -name release -delete || true
find -empty -delete || true

cat << EOT >> ${BUILD_DIR}/Procfile
web: cd \$HOME/release && ASPNETCORE_URLS='http://+:\$PORT' && /app/newrelic/usr/local/newrelic-netcore20-agent/run.sh dotnet "./${PROJECT_NAME}.dll"
EOT
